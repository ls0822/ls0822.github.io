<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>创建一篇文章测试文章</title>
    <url>/2023/06/21/%E5%88%9B%E5%BB%BA%E4%B8%80%E7%AF%87%E6%96%87%E7%AB%A0%E6%B5%8B%E8%AF%95%E6%96%87%E7%AB%A0/</url>
    <content><![CDATA[<p>一、背景<br>因业务需要及节省存储成本，需使用 md5 进行去重，但因大文件在端侧计算比较耗时，性能比较好的手机也许 7-10 秒左右，所以需要设计一种 md5 采集策略，减少计算时间。 </p>
<span id="more"></span>
<p>二、关键问题<br>● 解决大文件计算 MD5 耗时问题<br>  ○ 如果前 8K 或分段采样<br>● 如果使用采样，需较少采样对小文件影响的问题。<br>  ○ 如有些视频文件前段内容一样，如果采样过小则可能导致文件 md5 冲突。<br>三、方案设计<br>3.1 整体方案简介<br>结合大小文件的需求场景， 现在采取以下方案</p>
<p>由于 MD5 可能是经过采样的，有一定的重复几率，所以采用 MD5+ fileSize 进行文件去重。 </p>
<p>业务层或上传后台可在此基础之上添加一些其他去重条件，如 businessId 等</p>
<p>关键参数<br>通过多次测试结果，暂定以下参数：<br>文件大小判断阀值： 5M<br>分段大小: 3M<br>分段大小小于 5M，保证可至少采集两个采样段的字节数据用于计算 MD5，减少降低临近小文件的文件的 MD5 冲突问题。<br>分段采集：40KB<br>需小于分段大小。不易过大，如果为 0，则采用默认 8K 大小。<br>具体细节可查看 参数实验及选择<br>3.2 MD5 方案<br>小文件 MD5 方案<br>对文件进行完成的 MD5 计算<br>大文件 MD5 方案</p>
<p>通过把大文件分成若干段，只读取每段的前 len 字节，使用读取到的每段 len 字节，整体计算出一个 MD5 </p>
<p>三、关键代码实现<br>关键方法<br>private volatile static MessageDigest messageDigest; private static final String DIGEST_NAME &#x3D; “MD5”; &#x2F;**  *  计算文件 MD5  * @param file 文件  * @param fileSizeThresholds 文件大小阀值，当文件小于阀值时，则会进行 MD5 的完整计算， 当文件大于阀值时，则将进行分段采样计算  * @param partLen 分段的长度. partLen 需要大约 0； 如果 partLen&lt;&#x3D;0，则默认整体计算。  * @param partReadLen 分段读取前 partReadLen 长度的字节用于计算 md5。 partReadLen 如果小于 8K，则默认取前 8K 的值进行读取，如果  *                    partReadLen 大于 8K，则使用 partReadLen 的长度进行读取。  * @return  <em>&#x2F; public static String hashFileMd5(File file, int fileSizeThresholds, long partLen, long partReadLen) {     if (file &#x3D;&#x3D; null) {         return null;     }     String md5;     if (file.length() &gt; fileSizeThresholds &amp;&amp; partLen &gt; 0) {         byte[] bytes &#x3D; HashUtilsTest.hashFileMd5(file, partLen, partReadLen);         &#x2F;&#x2F; 转为 16 进制         md5 &#x3D; HashUtilsTest.toHex(bytes);     } else {         byte[] bytes &#x3D; HashUtilsTest.hashFileMd5(file, file.length(), file.length());         &#x2F;&#x2F; 转为 16 进制         md5 &#x3D; HashUtilsTest.toHex(bytes);     }     return md5; } &#x2F;</em>*  * 计算文件的 md5  * @param file  文件  * @param partLen 分段的长度. partLen 需要大约 0； 如果 partLen&lt;&#x3D;0，则默认整体计算。  * @param partReadLen 分段读取前 partReadLen 长度的字节用于计算 md5。 partReadLen 如果小于 8K，则默认取前 8K 的值进行读取，如果  *                    partReadLen 大于 8K，则使用 partReadLen 的长度进行读取。  * @return 返回 md5 加密数组  *&#x2F; public static byte[] hashFileMd5(File file,long partLen, long partReadLen) {     if (file &#x3D;&#x3D; null) {         return null;     } else {         &#x2F;&#x2F; 端侧兼容逻辑可忽略         try {             MessageDigest md;             if (Build.VERSION.SDK_INT &lt;&#x3D; 8) {                 md &#x3D; getMessageDigest();                 if (md !&#x3D; null) {                     synchronized(HashUtilsTest.class) {                         &#x2F;&#x2F; md5 计算关键方法调用                         return updateHashFilePart(md, SFile.create(file), partLen &lt;0? file.length(): partLen, partReadLen);                     }                 }             }             md &#x3D; getMessageDigestCopy();             return md !&#x3D; null ? updateHashFilePart(md, SFile.create(file), partLen &lt;0? file.length(): partLen, partReadLen) : null;         } catch (Exception e) {             e.printStackTrace();             return null;         }     } } &#x2F;**  * 计算 md5 方法  * @param digest  * @param file  文件  * @param partLen 分段的长度  * @param partReadLen 每段读取的字节长度  * @return 返回 md5 加密数组  * @throws IOException  *&#x2F; private static byte[] updateHashFilePart(MessageDigest digest, SFile file, long partLen,  long partReadLen) throws IOException {     file.open(SFile.OpenMode.Read);     long start &#x3D; 0;     int totalPartCount &#x3D; 0;     long totalReadByte &#x3D; 0;     long defMinReadLen &#x3D; 8192L;     &#x2F;&#x2F; 分片读取长度，如果小于 0，则设置为默认长度     partReadLen &#x3D; partReadLen &lt;0 ? defMinReadLen: partReadLen;     &#x2F;&#x2F; 循环计算     while(start &lt; file.length()) {         file.seek(SFile.OpenMode.Read, start);         int r;         long sum &#x3D; 0L;         byte[] buffer &#x3D; new byte[8192];         &#x2F;&#x2F; 循环读取段的 len 字节，直到读取完 partReadLen 的长度，则进入下一分段         for(int len &#x3D; (int)Math.min(defMinReadLen, partReadLen - sum); len &gt; 0 &amp;&amp; (r &#x3D; file.read(buffer, 0, len)) !&#x3D; -1; len &#x3D; (int)Math.min(defMinReadLen, partReadLen - sum)) {             digest.update(buffer, 0, r);             sum +&#x3D; (long)r;         }         totalReadByte +&#x3D; sum;         totalPartCount++;         start +&#x3D; partLen;     }     Log.d(“HashUtils”, “update hash, FileSize &#x3D; “ + file.length() + “, partSize &#x3D; “ + partLen +             “, partReadLen &#x3D; “ + partReadLen + “, totalPartCount &#x3D;” + totalPartCount +  “,totalReadByte &#x3D; “ + totalReadByte);     return digest.digest(); } </p>
<p>调用示例</p>
<p>long startTime &#x3D; System.currentTimeMillis(); File file &#x3D; new File(path); &#x2F;&#x2F; 阀值 5M，分段大小 3M， 段读取字节： 50KB String md5 &#x3D; HashUtils.hashFileMd5(file, 5* 1024<em>1024, 3</em>1024<em>1024,  50</em>1024); long time &#x3D; System.currentTimeMillis() - startTime; Log.d(“LLusonHashTest”, “fileName:” + file.getName() + “, time&#x3D;”+ time + “, md5&#x3D;”+ md5);</p>
<p>四、参数实验及选择</p>
<p>测试使用机型<br>型号	处理器核数	运行内存(RAM)	存储	设备等级<br>OPPO A371f	高通 4 核	2G	16G	低等级设备<br>Readmi K30 5G	高通 8核	6G	128G	高等级设备<br>OPPO A371f	4核	2G		低等级设备</p>
<p>当前线上机型占比</p>
<p>备注： 数据来源性能优化组， 源文件 <a href="https://www.yuque.com/docs/share/cf4dac43-d43e-44e2-82cd-70095ea8e5fa#">https://www.yuque.com/docs/share/cf4dac43-d43e-44e2-82cd-70095ea8e5fa?#</a></p>
<p>测试数据：</p>
<p>采用计算时长 （1G 文件）</p>
<p>文件大小	分段大小	分段读取长度	分片总数	总读取字节数	OPPO A371f 时长	Readmi K30 5G 时长<br>    3M	8KB	331	2711552	218.55	<br>1.04G<br>(1040480824)	3M	50KB	331	16.16M<br>(16947200)	1349.4	94.2ms<br>    3M	100KB	331	33894400	2391.3	<br>    3M	500KB	331	169472000	10785.55	<br>    3M	1M	331	347078656	15144.7	<br>    4M	8KB	249	2039808	183.2	<br>    4M	50KB	249	12748800	1043.4	<br>    4M	100KB	249	25497600	1884.0	<br>    4M	500KB	249	127269432	7838.7	<br>    4M	1M	249	260340280	11622.0	<br>    5M	8KB	199	1630208	153.0	<br>    5M	50KB	199	10188800	844.8	<br>    5M	100KB	199	20377600	1456.85	<br>    5M	500KB	199	101888000		</p>
<p>通过上面数据可发现，时间主要是和实际读取字节数量成正比。 正确数据读取量在 16 M 以下最为合适。 </p>
<p>可通过减少分片大小，增加采样点，以达到增加随机率。 </p>
<p>文件大小	分段大小	分段读取长度	分片总数	总读取字节数	OPPO A371f 时长	三星 SM-G7102	Readmi K30 5G 时长<br>    3M	40KB	331	13557760	1251.85	491.35	<br>1.04G<br>(1040480824)	3M	50KB	331	16.16M<br>(16947200)	1301.3	567.55	94.2ms<br>    4M	40KB	249	10199040	960.25	370.85	<br>    4M	50KB	249	12748800	1027.25	435.55	</p>
<p>通过埋点数量和计算效率，决定先采取 3M -40K 的作为条件。 </p>
<p>五、测试数据对齐<br>文件大小判断阀值： 5M<br>分段大小: 3M<br>分段采集：40KB</p>
<pre><code>文件大小	文件下载路径	md5 值
</code></pre>
<p>VID_20220414_194742.mp4	55731812	<a href="https://chat-s.usicdn.com/test/ud1/uploadTest/single/f/220420/02b1f462-d1c0-40f7-98eb-ccdeee4ba1a3.mp4">https://chat-s.usicdn.com/test/ud1/uploadTest/single/f/220420/02b1f462-d1c0-40f7-98eb-ccdeee4ba1a3.mp4</a>	05554813f9f88bc96098e657cf7d3c72<br>VID_20220414_194845.mp4	151992068	<a href="https://chat-s.usicdn.com/test/ud1/uploadTest/single/f/220420/38844623-0f38-4492-a084-e42b563d8474.mp4">https://chat-s.usicdn.com/test/ud1/uploadTest/single/f/220420/38844623-0f38-4492-a084-e42b563d8474.mp4</a>	67a362dfbdf3abddb06bd41aa578ffae<br>VID_20220408_204920.mp4	1040480824	<a href="https://chat-s.usicdn.com/test/ud1/uploadTest/single/f/220420/714b4ea4-ce3b-42dc-bb55-09173ec55ff6.mp4">https://chat-s.usicdn.com/test/ud1/uploadTest/single/f/220420/714b4ea4-ce3b-42dc-bb55-09173ec55ff6.mp4</a>	c99312f11e265edc826596c8197d3507<br>IMG_20220414_194728.jpg	6598277	<a href="https://chat-s.usicdn.com/test/ud1/uploadTest/single/f/220420/f63d26a7-62d6-4e8e-937a-f7331f9b52ad.jpg">https://chat-s.usicdn.com/test/ud1/uploadTest/single/f/220420/f63d26a7-62d6-4e8e-937a-f7331f9b52ad.jpg</a>	59092f4d94e82f2c36defb1437f5d504<br>IMG_20220404_182720.jpg	3658652	<a href="https://chat-s.usicdn.com/test/ud1/uploadTest/single/f/220325/dba22fde-83f0-48b4-8665-d7f110d72602.jpg">https://chat-s.usicdn.com/test/ud1/uploadTest/single/f/220325/dba22fde-83f0-48b4-8665-d7f110d72602.jpg</a></p>
<pre><code>be3ec2c4a4b41112b826113dc9c2fac8
</code></pre>
<p>_fyp.mp4	104202	<a href="https://chat-s.usicdn.com/test/ud1/uploadTest/single/f/220210/4df3fc7e-5e16-442a-b678-249b5b489aa1.mp4">https://chat-s.usicdn.com/test/ud1/uploadTest/single/f/220210/4df3fc7e-5e16-442a-b678-249b5b489aa1.mp4</a>	4c3496e4b0c889713dc67bfc6c29475d<br>IMG_20211013_172037.jpg	4443821	<a href="https://chat-s.usicdn.com/test/ud1/uploadTest/single/f/220124/e8fa1603-95ca-4293-a50b-f41cd05f08bd.jpg">https://chat-s.usicdn.com/test/ud1/uploadTest/single/f/220124/e8fa1603-95ca-4293-a50b-f41cd05f08bd.jpg</a>	d41cca449804ac6125a7aea6c7112c98</p>
]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>test</tag>
      </tags>
  </entry>
</search>
